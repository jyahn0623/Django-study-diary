Django 작업 환경 구성
- install python -> install pip -> pip install django
-> 프로젝트 생성을 원하는 directory로 들어가 django-admin startproject [project_name] 

Django 서버 시작
- python manage.py runserver [port] // manage.py는 project를 생성한 디렉토리에 있다.

App 생성
- python manage.py startapp polls // 하나의 url이 된다는 느낌

View 작성
- polls의 view.py에 
def index(request):
  return HttpResponse("Hello, world") // polls 페이지 접근 시 해당 내용을 반환해 준다. 
 
위와 같은 view를 호출해 주기 위해 이와 연결된 URL이 있어야 한다. 이를 위해 URLconf가 사용된다.
-> URLconf 설정을 위해 urls.py 파일을 생성

-- urls.py --
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='index'),
]

이후에, mysite(최상위 URLconf인 [project_name].urls)에서 설정을 해주어야 한다.
-- mysite/urls.py --
from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path('polls/', include('polls.urls')), // include 함수는 다른 URLconf를 참조할 수 있도록 도와주는 함수.
    # include() : URL 의 그 시점까지 일치하는 부분을 잘라내고, 남은 문자열 부분을 후속 처리를 위해 include 된 URLconf 로 전달
    path('admin/', admin.site.urls),
]

# path()는 4개의 인수를 가진다.
route : 패턴들은 GET 이나 POST 의 매개 변수들, 혹은 도메인 이름을 검색하지 않습니다. 예를 들어, https://www.example.com/myapp/ 
이 요청된 경우, URLconf 는 오직 myapp/ 부분만 바라 봅니다. https://www.example.com/myapp/?page=3,같은 요청에도, URLconf 는 
역시 myapp/ 부분만 신경쓴다.

view : Django 에서 일치하는 패턴을 찾으면, HttpRequest 객체를 첫번째 인수로 하고, 경로로 부터 '캡처된' 값을 키워드 인수로하여 
특정한 view 함수를 호출

name : URL 에 이름을 지으면, 템플릿을 포함한 Django 어디에서나 명확하게 참조할 수 있습니다. 이 강력한 기능을 이용하여,
단 하나의 파일만 수정해도 project 내의 모든 URL 패턴을 바꿀 수 있도록 도와준다.

models.py
models.py에 데이터베이스 모델링을 할 수 있다.
각, app의 폴더에 models.py가 있다.
-- models.py -- 
class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published')
    
class Choice(models.Model):
    question = models.ForeignKey(Question, on_delete=
                                 models.CASCADE)
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(defalut=0)

각각의 클래스 변수들은 모델의 데이터베이스 필드가 된다.
CharField, DateTimeField, IntegerField // 문자열, 데이터, 정수형

app을 현재의 project에 포함시키기 위해선, app의 구성 클래스에 대한 참조를 INSTALLED_APPS
설정에 추가시켜야 한다.

PollsConfig 클래스는 polls/apps.py 파일 내에 존재한다. 즉,
'polls/apps.PollsConfig'가 되고, 이렇게 구분된 경로를 
mysite/settings.py 파일을 편집하여 INSTALLED_APPS 설정에 추가하면 된다.


# my/settings.py
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'polls.apps.PollsConfig',
]
설정 파일을 변경하고 나서, python manage.py makemigrations polls을 통해
데이터베이스 모델이 변경되었다는 것을 장고에게 알려준다.

polls/migrations/0001_initial.py 파일을 통해 저장된 새모델을 읽어볼 수도 있다.

# 데이터베이스 모델을 만드는 3단계
(models.py 에서) 모델을 변경
python manage.py makemigrations 을 통해 이 변경사항에 대한 migration을 만듦
python manage.py migrate 명령을 통해 변경사항을 데이터베이스에 적용.


# shell에서 API 가지고 놀기
python manage.py shell 

q.question_text = '' // 질문 생성
q.save()

Question.objects.all()  # objects.all() displays all the questions in the database.

# polls/models.py에 __str__ 추가 하는 이유
__str__() 메소드를 추가하는것은 객체의 표현을 대화식 프롬프트에서 편하게 보려는 이유 말고도,
Django 가 자동으로 생성하는 관리 사이트 에서도 객체의 표현이 사용되기 때문.


q.choice_set.all() 


# 질문에 대한 3가지 선택지 생성
q.choice_set.create(choice_text='Not much', votes=0)
q.choice_set.create(choice_text='Very much', votes=0)
q.choice_set.create(choice_text='Yah sex', votes=0)

# 필터링 하여 삭제하기
>>> c = q.choice_set.filter(choice_text__startswith='Just hacking')
>>> c.delete()





# 관리자 생성
python manage.py createsuperuser

# 관리자 사이트 
localhost/admin

# 관리자 사이트에 app 추가하여 관리하기

관리 사이트에서 poll app 을 변경가능하도록 만들기
그런데, poll app 이 관리 인덱스 페이지에서 보이지 않네요. 어디에 있을까요?

여기서 하나만 더 하면 됩니다. 관리 사이트에 Question 객체가 관리 인터페이스를 가지고 있다는것을 알려주는 것입니다. 
이것을 하기 위해서는, polls/admin.py 파일을 열어 다음과 같이 편집하면 됩니다.

---- polls/admin.py ----
from django.contrib import admin
from .models import Question

admin.site.register(Question)

 
# view 파일은 공개 인터페이스이다.
댓글 기능, 날짜별 축적 페이지, 세부 페이지 등이 view이다.

장고는 URL을 간단하게 일반화할 수 있다.
view를 URL을 통해 엉기 위해 URLconfs를 사용하는 것.
URLconfs는 URL 패턴을 views에 연결한다.

path()를 통해 연결할 수 있었다.

ex)
views에
def vote(request, id)
  return HttpResponse("You are so sexy %s." %id)
  
urls에
path('<int:id>/', views.vote, name='vote')으로 추가하여 연결할 수 있다.
<int:id>의 id는 vote(··, id)의 id와 일치해야 한다.

* 사용자가 웹 사이트를 요청하면, 예로 polls/34/를 요청한다고 하면, 장고는 mysite.urls 파이썬듈을 모듈을
불러 온다. ROOT_URLCONF 설정에 의해 해당 모듈을 바라보도록 지정되어 있기 때문이다.
mysite.urls에서 urlpatterns라는 변수를 찾고, 순서대로 패턴을 따라간다. 이후에 polls를 찾은 후에, 일치하는
텍스트를 버리고 ("polls/") 남은 텍스트 34/를 polls.urls URLconf로 전달하여 남은 처리를 진행한다.
그리고 이후에 <int:request_id>와 일치하여 결과적으로 detail() view 함수가 실행되는 것.

# views에 정의한 detail 함수 
def detail(request, question_id):
    return HttpResponse("You are strong %s." %question_id)

detail(request=<HttpRequest object>, question_id=34)

# view가 행위를 하도록 만들기
view는 HttpResponse 객체를 반환하든지, Http404와 같은 오류를 출력하게 할 수 있고,
또한, 데이터베이스의 레코드를 읽을 수도, zip, xml 출력, pdf생성, 어떤 파이썬 라이브러리를 사용할 수 있다.

즉, 모든 장고는 HttpResponse와 exception을 원한다.

# view 내에 페이지 디자인까지 하게 되면, 하드 코딩이 되어 버린다.
이를 위해 templates 디렉토리를 만들어 디자인을 구현하면 된다.

project의 templates 설정에선 장고가 어떻게 template를 불러오고 렌더링할 것인지 서술한다.
즉, DjangoTmpelates가 설치된(polls와 같은) templates를 탐색한다. 

따라서, installed app(polls)에 templates의 dir을 생성하고, 그 안에 polls의 디렉토리를 생성한다.
그리고 polls안에 index.html을 생성한다.

-> 장고의 template 로더가 polls/templates/polls/index.html과 같은 형태로 읽어온다.
따라서, polls/index.html만 써도 참조할 수 있다.

* polls/teamplates에 처리하면 되지 않을까? -> 동일한 template 이름이 다른 어플에 있을 경우, 
이 차이를 구분하지 못한다. namespace의 개념을 도입해 줄 수 있게 해 주는 것이 위의 방식이다.

return HttpResponse(template.render(context, request)) context는 template에 쓰이는 변수명과,
Python의 객체를 연결하는 사전형 값이다.


# render()
teamplate에 context를 채워넣어, HttpResponse와 함께 돌려주는 구문은 자주 쓰인다. 이걸 쉽게 표현할 수 있는 방법을 제공
return HttpResponse(template.render(context, request)) -> return render(request, 'polls/index.html', [context])

# 404 에러 일으키기
from django.http import Http404
def detail(request, question_id):
    try:
        question = Question.objects.get(pk=question_id)
    except Question.DoesNotExist:
        raise Http404("Question does not exist")
    return render(request, 'polls/detail.html', {'question': question})

get_object_or_404() - 객체가 존재하지 않을 때 get()을 사용하여 http404 예외를 발생시키는 것은 자주 쓰이는 용법이고,
이것에 대한 단축도 제공한다.
question = get_object_or_404(Question, pk=question_id) // 위의 question 부분이 바뀌었다.

# template 시스템은 변수의 속성에 접근하기 위해 점탐색 문법을 사용
-> <h1> {{ question.question_text }} </h1> 여기서 question 객체에 대해 사전형으로 탐색하고
탐색에 실패하면 속성값으로 탐색한다. 만약 속성 탐색에도 실패한다면 리스트의 인덱스 탐색을 시도한다.

<li><a href="{% url 'detail' q.id %}">{{ q.question_text }} 을 통해서 하드코딩된 URL을 제거할 수 있다.
하드코딩의 경우 수많은 템플릿을 가진 프로그램의 경우 URL을 바꾸는 것이 어렵다. BUT, polls.urls 모듈의 paht()
함수에서 인수의 이름을 정의했기 때문에 {% url %} template 태그를 사용해 url 설정에 정의한 특정한 URL 경로의 의존성을 
제거할 수 있다.

 detail view 의 URL 을 polls/specifics/12/ 로 바꾸고 싶다면, template 에서 바꾸는 것이 아니라 polls/urls.py 에서 바꿔야 한다.

만일 다수의 앱이 프로젝트에 있다면 이름 공간이 중복될 수 있다.
이를 위해

urls.py에 app_name = 'polls'을 추가하고
index.html에서 <li><a href="{% url 'polls:detail' question.id %}">{{ question.question_text }}</a></li>
이름 공간을 추가할 수 있다.

# 간단한 폼 만들기
<h1>{{ question.question_text }}</h1>

{% if error_message %}<p><strong>{{ error_message }}</strong></p>{% endif %}

<form action="{% url 'polls:vote' question.id %}" method="post">
{% csrf_token %}
{% for choice in question.choice_set.all %}
    <input type="radio" name="choice" id="choice{{ forloop.counter }}" value="{{ choice.id }}">
    <label for="choice{{ forloop.counter }}">{{ choice.choice_text }}</label><br>
{% endfor %}
<input type="submit" value="Vote">
</form>

폼을 생성한다.
각 라디오 버튼의 name은 choice이고, 무엇을 선택하냐에 따라 choice=#가 바뀐다.
또한, form에서 post를 사용하는 데 이는 서버의 자료를 변경하는 폼을 작성할 때마다 post를
사용하는 것은 권장사항이기 때문에 post를 이용해야 한다.

#  {% csrf_token %}
POST를 통해 자료를 수정하는 효과를 가지고 있기 때문에, 사이트 간 요청 위조를 고민해야 한다.
BUT, 장고에서는 요청 위조에 대항하기 위해 기능을 제공하는데,  {% csrf_token %} 이것을 내부 URL을 향하는
모든 POST 폼에 사용하면 된다.

request.POST 는 키로 전송된 자료에 접근할 수 있도록 해주는 사전과 같은 객체입니다. 
이 경우, request.POST['choice'] 는 선택된 설문의 ID를 문자열로 반환합니다. request.POST 의 값은 항상 문자열들입니다.

Django는 같은 방법으로 GET 자료에 접근하기 위해 request.GET 를 제공합니다 
-- 그러나 POST 요청을 통해서만 자료가 수정되게하기 위해서, 명시적으로 코드에 request.POST 를 사용하고 있습니다.

만약 POST 자료에 choice 가 없으면, request.POST['choice'] 는 KeyError 가 일어납니다. 
위의 코드는 KeyError 를 체크하고, choice가 주어지지 않은 경우에는 에러 메시지와 함께 설문조사 폼을 다시보여줍니다.

설문지의 수가 증가한 이후에, 코드는 일반 HttpResponse 가 아닌 HttpResponseRedirect 를 반환하고,
HttpResponseRedirect 는 하나의 인수를 받습니다: 그 인수는 사용자가 재전송될 URL 입니다. 
(이 경우에 우리가 URL을 어떻게 구성하는지 다음 항목을 보세요).

위의 파이썬 주석이 지적했듯이, POST 데이터를 성공적으로 처리 한 후에는 항상 HttpResponseRedirect 를 반환해야합니다. 
이 팁은 Django에만 국한되는것이 아닌 웹개발의 권장사항입니다.

우리는 이 예제에서 HttpResponseRedirect 생성자 안에서 reverse() 함수를 사용하고 있습니다. 
이 함수는 뷰 함수에서 URL을 하드코딩하지 않도록 도와줍니다. 제어를 전달하기 원하는 뷰의 이름을, 
URL패턴의 변수부분을 조합해서 해당 뷰를 가리킵니다. 여기서 우리는 튜토리얼 3 에서 설정했던 URLconf를 사용하였으며,
이 reverse() 호출은 아래와 같은 문자열을 반환할 것입니다
-- '/polls/3/results/' -- 3은 question.id의 값.


# 제네릭 뷰 사용하기
detail()과 results()뷰는 매우 간단하고, 서로 비슷한 점이 있다.
이것을 제네릭 뷰를 통해 추상화하여 일반적인 패턴을 묶어 놨기 때문에, Python 코드를 작성하지 않아도 된다.

-- 다음과 같은 단계만 거치면 된다. -- 
1.URLconf를 변환하십시오.
urlpatterns = [
    path('', views.IndexView.as_view(), name='index'),
    path('<int:pk>/', views.DetailView.as_view(), name='detail'),
    path('<int:pk>/results/', views.ResultsView.as_view(), name='results'),
    path('<int:question_id>/vote/', views.vote, name='vote'),
    
    
  -> view.py
  
class IndexView(generic.ListView):
    templatee_name = 'polls/index.html'
    context_object_name = 'latest_question_list'
    
    def get_queryset(self):
        return Question.objects.order_by('-pub_date')[:5]
    
class DetailView(generic.DetailView):
    model = Question
    template_name = 'polls/detail.html'
    
class ResultView(generic.DetailView):
    model = Question
    template_name = 'polls/results.html'
    
 클래스로 갈아 치운 모습이다.
 
 
2.불필요한 오래된보기 중 일부를 삭제하십시오.
3.Django의 제너릭 뷰를 기반으로 새로운 뷰를 도입하십시오.

ListView와 DetailView의 두 가지 제너릭 뷰를 사용하고 있습니다. 이 두보기는 각각 "개체 목록 표시" 및 "특정 개체 유형에 대한 세부 정보 페이지 표시" 개념을 추상화합니다.

각 제너릭 뷰는 어떤 모델이 적용될 것인지를 알아야합니다. 이것은 model 속성을 사용하여 제공됩니다.
DetailView 제너릭 뷰는 URL에서 캡쳐 된 기본 키 값이``"pk"\ 라고 기대하기 때문에 ``question_id를 제너릭 뷰를 위해 pk로 변경합니다.
기본적으로 DetailView 제너릭 뷰는 <app name>/<model name>_detail.html 템플릿을 사용합니다. 우리의 경우에는 "polls/question_detail.html"템플릿을 사용할 것입니다.
template_name 속성은 Django에게 자동 생성 된 기본 템플릿 이름 대신에 특정 템플릿 이름을 사용하도록 알려주기 위해 사용됩니다. results리스트 뷰에 대해서 template_name을 지정합니다 - 결과 뷰와 상세 뷰가 렌더링 될 때 서로 다른 모습을 갖도록합니다. 이들이 둘다 동일한 DetailView를 사용하고 있더라도 말이지요.

마찬가지로, ListView 제네릭 뷰는 <app name>/<model name>_list.html 템플릿을 기본으로 사용합니다; 
이미 있는 "polls/index.html" 템플릿을 사용하기 위해 ListView 에 template_name 를 전달했습니다.

이 튜토리얼의 이전 부분에서 템플릿에는 question 및 latest_question_list 컨텍스트 변수가 포함 된 컨텍스트가 제공되었습니다. 
DetailView의 경우, question 변수가 자동으로 제공됩니다 - Django 모델 (Question)을 사용하기 때문에 
Django는 컨텍스트 변수의 적절한 이름을 결정할 수 있습니다. 그러나 ListView의 경우 자동 생성 된 컨텍스트 변수는 question_list 입니다.
이것을 덮어 쓰려면 context_object_name 속성을 제공하고, 대신에 latest_question_list를 사용하도록 지정하십시오. 
다른 접근 방법으로, 템플릿을 새로운 기본 컨텍스트 변수와 일치하도록 변경할 수 있습니다. 
그러나 원하는 변수를 사용하도록 Django에 지시하는 것이 훨씬 쉽습니다.

# 자동화 testing 만들기 
tests.py에 테스트 시스템을 넣어놓을 수 있다.

-- polls/tests.py

import datetime
from django.test import TestCase
from django.utils import timezone
from .models import Question

class QuestionModelTests(TestCase):
    def test_was_published_recently_with_future_question(self):
        """
        was_published_recently() returns False for questions whose pub_date
        is in the future.
        """
        time = timezone.now() + datetime.timedelta(days=30)
        future_question = Question(pub_date=time)
        self.assertIs(future_question.was_published_recently(), False)

python manage.py test polls // 해당 명령어를 통해 tests.py에 적힌 테스트를 할 수 있다.

-- 테스트 주 일어난 일들
manage.py test polls looked for tests in the polls application
django.test.TestCase 클래스의 서브 클래스를 찾았습니다.
테스트 목적으로 특별한 데이터베이스를 만들었습니다.
테스트 메소드 - 이름이 test로 시작하는 것들을 찾습니다.
test_was_published_recently_with_future_question에서 pub_date필드가 30일 미래인 Question 인스턴스를 생성했습니다
... assertIs() 메소드를 사용하여, 우리가 False가 반환되기를 원함에도 불구하고 was_published_recently() 가 True를 반환한다는 것을 발견했습니다.
테스트는 어떤 테스트가 실패했는지와 실패가 발생한 행까지 알려줍니다.

테스트를 하고 나서 오류가 발생했다면 (즉, assertIs에서 False가 나왔다면) 오류를 수정해야 한다.

models.py를 아래와 갈이 수정해 미래에 대한 오류를 막는다면,
def was_published_recently(self):
        now = timezone.now()
        return now - datetime.timedelta(days=1) <= self.pub_date <= now
        
OK 사인이 나온다.

이렇게, 하나의 테스팅이 아닌 여러 테스팅도 사용할 수 있다. 
def test_was_published_recently_with_old_question(self):
    """
    was_published_recently() returns False for questions whose pub_date
    is older than 1 day.
    """
    time = timezone.now() - datetime.timedelta(days=1, seconds=1)
    old_question = Question(pub_date=time)
    self.assertIs(old_question.was_published_recently(), False)

def test_was_published_recently_with_recent_question(self):
    """
    was_published_recently() returns True for questions whose pub_date
    is within the last day.
    """
    time = timezone.now() - datetime.timedelta(hours=23, minutes=59, seconds=59)
    recent_question = Question(pub_date=time)
    self.assertIs(recent_question.was_published_recently(), True)
  
  
 # 서버에서 생성된 HTML을 제외하고, 웹 어플리케이션은 일반적으로 전체 웹 페이지를 렌더링하는 데 필요한
 추가 파일 - IMAGE, JS, CSS를 제공해야 하는데, 이것은 장고에선 static 파일이라고 한다.
 먼저, polls 디렉토리에 static 디렉토리를 만듭니다. ``polls/templates/``안의 템플릿을 찾는 것과 비슷하게 정적 파일을 찾습니다.

Django의 STATICFILES_FINDERS 설정은 다양한 소스에서 정적 파일을 찾는 방법을 알고 있는 파인더 목록을 가지고 있습니다. 
기본값 중 하나는 AppDirectoriesFinder 인데, INSTALLED_APPS 에서 "정적" 하위 디렉토리를 찾습니다, 방금 생성 한 polls 의 경우입니다. 관리 사이트는 정적 파일에 대해 동일한 디렉토리 구조를 사용합니다.

방금 생성 한 static 디렉토리 안에 polls 라는 또 다른 디렉토리를 만들고 그 안에 style.css 라는 파일을 만듭니다. 
즉, 스타일 시트는 polls/static/polls/style.css에 있어야합니다. AppDirectoriesFinder 정적 파일 파인더가 작동하는 방식에 따라 Django의 정적 파일을 polls/style.css 라고 간단하게 참조 할 수 있습니다. 
이것은 템플릿 경로를 참조하는 것과 유사합니다
 
 polls/static/polls/style.css¶
li a {
    color: green;
}
다음으로, polls/templates/polls/index.html의 맨 위에 다음을 추가하십시오:

polls/templates/polls/index.html¶
{% load static %}

<link rel="stylesheet" type="text/css" href="{% static 'polls/style.css' %}">
{% static %} 템플릿 태그는 정적 파일의 절대 URL을 생성합니다.

이미지는 polls/static/polls 디렉토리 안에 images 서브 디렉토리를 만들고,
이 안에 이미지를 넣는다.


# 관리자 사이트 커스터 마이징 하기
class QuestionAdmin(admin.ModelAdmin):
    fields = ['pub_date', 'question_text']
    
admin.site.register(Question, QuestionAdmin)

// 원하는 모델 타입을 정의하고, admin.site.register 인자에 넣어주면 된다.

class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        ('AhnJuyoung'                      , {'fields': ['question_text']}),
        ('Date information           ', {'fields':['pub_date']}),
    ]
    
admin.site.register(Question, QuestionAdmin)
// 필드셋으로 나누어 구분을 지을 수도 있다.



from django.contrib import admin
from .models import Choice, Question

class ChoiceInline(admin.StackedInline):
    model = Choice
    extra = 3

class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        (None,               {'fields': ['question_text']}),
        ('Date information', {'fields': ['pub_date'], 'classes': ['collapse']}),
    ]
    inlines = [ChoiceInline]

admin.site.register(Question, QuestionAdmin)
위 소소는 Django에게 "Choice 객체는 Question 관리자 페이지에서 편집된다. 기본으로 3가지 선택 항목을 제공함." 이라고 알려줍니다.

// 즉, 선택 영역은 인라인으로 처리하여, QuestionAdmin의 영역에 추가된다.
// admin.StackInline이 있고, admin.TabularInline가 있는데, TabularInline은 테이블 기반으로 표시된다.


기본적으로 Django는 각 객체의 str()을 표시합니다. 그러나 개별 필드를 표시 할 수 있는 경우 가끔 도움이 될 수 있습니다. 
이렇게 하려면 list_display admin 옵션을 사용합니다. 
이 옵션은 객체의 변경 목록 페이지에서 열로 표시 할 필드 이름들의 튜플입니다.
class QuestionAdmin(admin.ModelAdmin):
    # ...
    list_display = ('question_text', 'pub_date', 'was_published_recently')
    
// 관리자 변경 목록도 커스터마이징 할 수 있다.


polls/models.py¶
class Question(models.Model):
    # ...
    def was_published_recently(self):
        now = timezone.now()
        return now - datetime.timedelta(days=1) <= self.pub_date <= now
    was_published_recently.admin_order_field = 'pub_date'
    was_published_recently.boolean = True
    was_published_recently.short_description = 'Published recently?'
 // 관리자 목록에는 해당 메소드의 이름이 그대로 나오지만, models.py에서 변경함으로써
 알리아스 등과 같은 기능들을 사용할 수 있다.
 
 
 
 
 
 
 관리자 룩앤필 커스터마이징¶
명백히, 모든 관리자 페이지 상단에 "Django administration"이 있다는 것은 우스꽝스럽습니다. 이건 그저 자리를 채워넣기 위한 문자열입니다.

Django의 템플릿 시스템을 사용하면 쉽게 변경할 수 있습니다. Django 관리자는 Django 자체에 의해 구동되며 인터페이스는 Django 자신의 템플릿 시스템을 사용합니다.

프로젝트의 템플릿 커스터마이징¶
프로젝트 디렉토리 (manage.py를 포함하고있는)에 templates 디렉토리를 만듭니다. 템플릿은 장고가 액세스 할 수있는 파일 시스템 어디에서나 사용할 수 있습니다. (Django는 서버가 실행되는 사용자로 실행됩니다.) 그러나 프로젝트 내에 템플릿을 유지하는 것은 따라야 할 좋은 규칙입니다.

설정 파일 (mysite/settings.py를 기억하세요)을 열고 DIRS 옵션을 TEMPLATES 설정에 추가하십시오:

mysite/settings.py¶
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
DIRS는 Django 템플릿을 로드 할 때 검사 할 파일 시스템 디렉토리 목록입니다. 바로 검색 경로입니다.

템플릿 구성

정적 파일과 마찬가지로, 하나의 커다란 템플릿 디렉토리에 모든 템플릿을 함께 넣을 수 있습니다. 그렇게 해도 완벽하게 잘 작동할 것입니다. 그러나, 특정 애플리케이션에 속한 템플릿은 프로젝트(templates) 가 아닌 해당 애플리케이션의 템플릿 디렉토리(예: polls/templates)에 있어야 합니다. 우리는 왜 우리가 이렇게 해야하는 지에 대한 더 자세한 내용을 reusable apps tutorial 에서 논의할 것입니다.

이제 templates 디렉토리에 admin이라는 디렉토리를 만들고 장고 자체 소스 코드 (django/contrib/admin/templates)을 해당 디렉토리에 복사합니다.

Django 소스 파일은 어디에 있습니까?

Django 소스 파일이 시스템에있는 위치를 찾는 데 어려움이있는 경우 다음 명령을 실행하십시오.

/ 
$ python -c "import django; print(django.__path__)"
그런 다음, 파일을 편집하고 {{site_header|default:_ ('Django administration' }}(중괄호를 포함하여)를 자신의 사이트 이름으로 바꿉니다. 다음과 같은 코드 섹션을 작성해야합니다.

{% block branding %}
<h1 id="site-name"><a href="{% url 'admin:index' %}">Polls Administration</a></h1>
{% endblock %}
이 방법을 사용하여 템플릿을 재정의하는 방법을 학습합니다. 실제 프로젝트에서는 아마 django.contrib.admin.AdminSite.site_header 속성을 사용하여이 개별 커스터마이징을보다 쉽게 만들 수 있습니다.

이 템플릿 파일에는 {% block branding %}및 {{title}}과 같은 텍스트가 많이 포함되어 있습니다. {%와 {{태그들은 장고의 템플릿 언어의 일부입니다. Django가 admin/base_site.html을 렌더링 할 때, 이 템플릿 언어는 Tutorial 3 에서 보았 듯이 최종 HTML 페이지를 생성하기 위해 평가 될 것입니다.

Django의 기본 admin 템플릿 중 어떤 것도 덮어 쓸수 있습니다. 템플릿을 덮어 쓰려면, base_site.html로했던 것과 똑같은 일을 하면 됩니다 - 기본 디렉토리에서 그것을 커스텀 디렉토리로 복사하고 변경하십시오.

어플리케이션의 템플릿 사용자 정의¶
그러나 DIRS가 기본설정으로 비어 있다면, 장고는 기본 관리자 템플릿을 어떻게 찾을까요? 그 해답은 APP_DIRS 설정이 True로 설정되어 있기 때문에 Django는 각 어플리케이션 패키지 내에서 templates/ 서브 디렉토리를 자동으로 찾아서 대체하게 됩니다. (django.contrib.admin이 어플리케이션 임을 잊지 마십시오.)

투표 어플리케이션은 복잡하지 않으며 사용자 정의 admin 템플릿이 필요하지 않습니다. 그러나 Django의 표준 admin 템플릿을 좀더 정교하게 필요에 맞게 수정 할 경우 프로젝트 템플릿 대신 어플리케이션의 템플릿을 수정하는 것이 더 현명합니다. 그렇게 하면 다른 새 프로젝트에 투표 애플리케이션을 포함시킬 수 있고, 필요할때는 커스텀 템플릿을 찾을수 있습니다.

Django가 템플릿을 찾는 방법에 대한 자세한 정보는 템플릿 로딩 문서를 보십시오.

admin 인덱스 페이지 수정하기¶
제목과 같이, Django admin 인덱스 페이지의 모양과 느낌을 수정하고 싶을 수도 있습니다.

기본적으로 admin 어플리케이션과 함께 등록 된 INSTALLED_APPS의 모든 어플리케이션을 사전 순으로 표시합니다. 어쩌면 레이아웃을 크게 변경하고자 할 수 있습니다. 설사 그렇게 하더라도 인덱스는 admin의 가장 중요한 페이지이고, 사용하기 쉬워야합니다.

커스터마이징 할 템플릿은 admin/index.html입니다. (이전 섹션의 admin/base_site.html와 같은 작업을 합니다 - 기본 디렉토리에서 커스텀 템플릿 디렉토리로 복사하십시오). 파일을 편집하면 app_list라는 템플릿 변수를 사용하는 것을 볼 수 있습니다. 이 변수는 설치된 모든 장고 앱을 포함합니다. 이를 사용하는 대신 최선의 방법이라고 생각한다면 개체 별 admin 페이지에 대한 링크를 하드 코딩 할 수 있습니다.
 


